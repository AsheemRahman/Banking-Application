<style>
    .main-div {
        display: flex;
        justify-content: center;
        gap: 4rem;
    }

    h1 {
        text-align: center;
        color: #fefeeb;
        padding: 20px;
    }

    .user-Dashboard {
        width: 80%;
        max-width: 600px;
        background-color: #232323;
        padding: 20px;
        border-radius: 8px;
        box-shadow: 0 0 10px rgba(0, 0, 0, 0.1);
    }

    /* h2 {
        color: #333;
        margin-top: 0;
    } */

    form {
        margin: 20px 0;
    }

    input[type="number"] {
        width: calc(100% - 22px);
        padding: 10px;
        font-size: 16px;
        border: 1px solid #ccc;
        border-radius: 4px;
    }

    button {
        width: 100%;
        padding: 10px;
        font-size: 16px;
        color: #fff;
        background-color: #007bff;
        border: none;
        border-radius: 4px;
        cursor: pointer;
        margin-top: 10px;
    }

    button:hover {
        background-color: #0056b3;
    }

    ul {
        list-style-type: none;
        padding: 0;
    }

    li {
        padding: 10px;
        border-bottom: 1px solid #ddd;
    }

    /* transtion table */
    .transaction {
        display: flex;
        justify-content: center;
    }

    .transaction-history {
        background: #232323;
        color: #fefeeb;
        border-radius: 5px;
    }

    .transaction-history h1 {
        display: flex;
        justify-content: center;
        padding: 4rem;
    }

    .transaction-history {
        margin: 20px 0;
    }

    .transaction-head,
    .transaction-row {
        display: flex;
        justify-content: space-between;
        align-items: center;
    }

    .flex-row {
        flex: 1;
        text-align: center;
    }

    .transaction-head .flex-row {
        font-weight: bold;
    }

    .transaction-row {
        padding: 10px;
        margin-top: 10px;
    }

    .no-history {
        padding: 5rem;
        display: flex;
        justify-content: center;
    }

    .profile {
        display: flex;
        flex-direction: column;
        align-items: center;
    }

    #profile-form {
        width: 100%;
        display: flex;
        flex-direction: column;
        align-items: center;
    }

    .user-profile-div {
        background: #232323;
        color: #fefeeb;
    }

    .form-group {
        width: 70%;
    }
</style>

<%- include('navbar') %>

    <h1>User Dashboard</h1>
    <div class="main-div container">
        <div class="user-Dashboard">
            <h2 class="mt-5">Account Balance: <i class="bi bi-currency-rupee"></i><span id="accountBalance">
                    <%= user.balance %>
                </span></h2>

            <form id="depositForm">
                <input type="number" class="mt-4" name="amount" placeholder="Deposit Amount" required>
                <button type="submit" class="mt-4">Deposit</button>
            </form>

            <form id="withdrawForm">
                <input type="number" class="mt-4" name="amount" step="0.01" placeholder="Withdraw Amount" required>
                <button type="submit" class="mt-4">Withdraw</button>
            </form>
        </div>
        <div class="col-lg-5">
            <div class="card user-profile-div">
                <div class="card-body">
                    <div class="profile">
                        <i class="bi bi-person-square" style="font-size: 4rem;"></i>
                        <h2>Your Profile</h2>
                    </div>
                    <form id="profile-form" method="post">
                        <div class="form-group mb-3">
                            <label class="profile-text">Name</label>
                            <input type="text" class="form-control" name="userName" id="userName"
                                value="<%= user.name %>" readonly>
                        </div>
                        <div class="form-group mb-3">
                            <label class="profile-text">Email address</label>
                            <input type="email" class="form-control" name="email" id="email" required
                                value="<%= user.email %>" readonly />
                        </div>
                        <div class="form-group mb-5">
                            <label class="profile-text">Phone Number</label>
                            <input type="text" class="form-control" name="phoneNumber" id="phoneNumber"
                                value="<%= user.phone %>" readonly>
                        </div>
                        <a href="/logout" class="btn btn-danger"><i class="fas fa-sign-out-alt"></i>logout</a>
                    </form>
                </div>
            </div>
        </div>

    </div>
    <div class="transaction">
        <div class="col-lg-10">
            <div class="transaction-history">
                <h1>Transaction History</h1>
                <% if(transactions.length> 0) { %>
                    <div class="transaction-head">
                        <div class="flex-row text-center">
                            <h6>Date</h6>
                        </div>
                        <div class="flex-row text-center">
                            <h6>Type</h6>
                        </div>
                        <div class="flex-row text-center">
                            <h6>Order Id</h6>
                        </div>
                        <div class="flex-row text-center">
                            <h6>Amount</h6>
                        </div>
                    </div>
                    <% transactions.forEach(element=> { %>
                        <div class="transaction-row">
                            <div class="flex-row text-center">
                                <p>
                                    <%= element.createdAt.toDateString() %>
                                </p>
                            </div>
                            <div class="flex-row text-center">
                                <p>
                                    <%= element.type %>
                                </p>
                            </div>
                            <div class="flex-row text-center">
                                <h6>#<%= element.orderId %>
                                </h6>
                            </div>
                            <div class="flex-row text-center">
                                <h5>â‚¹ <%= element.amount %>
                                </h5>
                            </div>
                        </div>
                        <% }); %>
                            <% } else { %>
                                <h3 class="no-history">No Transactions Yet</h3>
                                <% } %>
            </div>
        </div>
    </div>

    <%- include('footer') %>


        <script>
            document.getElementById('depositForm').addEventListener('submit', async (event) => {
                event.preventDefault();

                const form = event.target;
                const formData = new FormData(form);
                const amount = formData.get('amount');

                try {
                    const response = await fetch('/deposit', {
                        method: 'POST',
                        body: JSON.stringify({ amount }),
                        headers: {
                            'Content-Type': 'application/json',
                        },
                    });

                    const data = await response.json();

                    if (response.ok) {
                        document.getElementById('accountBalance').textContent = (parseFloat(document.getElementById('accountBalance').textContent) + parseFloat(amount)).toFixed(2);
                        form.reset();
                        await Swal.fire({
                            title: 'Success!',
                            text: data.message,
                            icon: 'success',
                            confirmButtonText: 'OK'
                        });
                    } else {
                        await Swal.fire({
                            title: 'Error!',
                            text: data.message,
                            icon: 'error',
                            confirmButtonText: 'OK'
                        });
                    }
                } catch (error) {
                    await Swal.fire({
                        title: 'Error!',
                        text: 'An unexpected error occurred.',
                        icon: 'error',
                        confirmButtonText: 'OK'
                    });
                }
            });

            document.getElementById('withdrawForm').addEventListener('submit', async (event) => {
                event.preventDefault();

                const form = event.target;
                const formData = new FormData(form);
                const amount = formData.get('amount');

                try {
                    const response = await fetch('/withdraw', {
                        method: 'POST',
                        body: JSON.stringify({ amount }),
                        headers: {
                            'Content-Type': 'application/json',
                        },
                    });
                    const data = await response.json();
                    if (response.ok) {
                        document.getElementById('accountBalance').textContent = (parseFloat(document.getElementById('accountBalance').textContent) - parseFloat(amount)).toFixed(2);
                        form.reset();
                        await Swal.fire({
                            title: 'Success!',
                            text: data.message,
                            icon: 'success',
                            confirmButtonText: 'OK'
                        });
                    } else {
                        await Swal.fire({
                            title: 'Error!',
                            text: data.message,
                            icon: 'error',
                            confirmButtonText: 'OK'
                        });
                    }
                } catch (error) {
                    await Swal.fire({
                        title: 'Error!',
                        text: 'An unexpected error occurred.',
                        icon: 'error',
                        confirmButtonText: 'OK'
                    });
                }
            });
        </script>